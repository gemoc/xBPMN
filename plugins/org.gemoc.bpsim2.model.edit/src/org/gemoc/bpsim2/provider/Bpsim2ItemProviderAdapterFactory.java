/**
 */
package org.gemoc.bpsim2.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gemoc.bpsim2.util.Bpsim2AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Bpsim2ItemProviderAdapterFactory extends Bpsim2AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Bpsim2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.BetaDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BetaDistributionTypeItemProvider betaDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.BetaDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBetaDistributionTypeAdapter() {
		if (betaDistributionTypeItemProvider == null) {
			betaDistributionTypeItemProvider = new BetaDistributionTypeItemProvider(this);
		}

		return betaDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.BinomialDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinomialDistributionTypeItemProvider binomialDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.BinomialDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinomialDistributionTypeAdapter() {
		if (binomialDistributionTypeItemProvider == null) {
			binomialDistributionTypeItemProvider = new BinomialDistributionTypeItemProvider(this);
		}

		return binomialDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.BooleanParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanParameterTypeItemProvider booleanParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.BooleanParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanParameterTypeAdapter() {
		if (booleanParameterTypeItemProvider == null) {
			booleanParameterTypeItemProvider = new BooleanParameterTypeItemProvider(this);
		}

		return booleanParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.BPSimDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BPSimDataTypeItemProvider bpSimDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.BPSimDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBPSimDataTypeAdapter() {
		if (bpSimDataTypeItemProvider == null) {
			bpSimDataTypeItemProvider = new BPSimDataTypeItemProvider(this);
		}

		return bpSimDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.Calendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarItemProvider calendarItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.Calendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarAdapter() {
		if (calendarItemProvider == null) {
			calendarItemProvider = new CalendarItemProvider(this);
		}

		return calendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ConstantParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantParameterItemProvider constantParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ConstantParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantParameterAdapter() {
		if (constantParameterItemProvider == null) {
			constantParameterItemProvider = new ConstantParameterItemProvider(this);
		}

		return constantParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ControlParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlParametersItemProvider controlParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ControlParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlParametersAdapter() {
		if (controlParametersItemProvider == null) {
			controlParametersItemProvider = new ControlParametersItemProvider(this);
		}

		return controlParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.CostParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CostParametersItemProvider costParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.CostParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCostParametersAdapter() {
		if (costParametersItemProvider == null) {
			costParametersItemProvider = new CostParametersItemProvider(this);
		}

		return costParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.DateTimeParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTimeParameterTypeItemProvider dateTimeParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.DateTimeParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTimeParameterTypeAdapter() {
		if (dateTimeParameterTypeItemProvider == null) {
			dateTimeParameterTypeItemProvider = new DateTimeParameterTypeItemProvider(this);
		}

		return dateTimeParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.DistributionParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistributionParameterItemProvider distributionParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.DistributionParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributionParameterAdapter() {
		if (distributionParameterItemProvider == null) {
			distributionParameterItemProvider = new DistributionParameterItemProvider(this);
		}

		return distributionParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.DurationParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DurationParameterTypeItemProvider durationParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.DurationParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDurationParameterTypeAdapter() {
		if (durationParameterTypeItemProvider == null) {
			durationParameterTypeItemProvider = new DurationParameterTypeItemProvider(this);
		}

		return durationParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ElementParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementParametersItemProvider elementParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ElementParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementParametersAdapter() {
		if (elementParametersItemProvider == null) {
			elementParametersItemProvider = new ElementParametersItemProvider(this);
		}

		return elementParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ElementParametersType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementParametersTypeItemProvider elementParametersTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ElementParametersType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementParametersTypeAdapter() {
		if (elementParametersTypeItemProvider == null) {
			elementParametersTypeItemProvider = new ElementParametersTypeItemProvider(this);
		}

		return elementParametersTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.EnumParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumParameterTypeItemProvider enumParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.EnumParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumParameterTypeAdapter() {
		if (enumParameterTypeItemProvider == null) {
			enumParameterTypeItemProvider = new EnumParameterTypeItemProvider(this);
		}

		return enumParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ErlangDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErlangDistributionTypeItemProvider erlangDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ErlangDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErlangDistributionTypeAdapter() {
		if (erlangDistributionTypeItemProvider == null) {
			erlangDistributionTypeItemProvider = new ErlangDistributionTypeItemProvider(this);
		}

		return erlangDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ExpressionParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionParameterTypeItemProvider expressionParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ExpressionParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionParameterTypeAdapter() {
		if (expressionParameterTypeItemProvider == null) {
			expressionParameterTypeItemProvider = new ExpressionParameterTypeItemProvider(this);
		}

		return expressionParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.FloatingParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatingParameterTypeItemProvider floatingParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.FloatingParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatingParameterTypeAdapter() {
		if (floatingParameterTypeItemProvider == null) {
			floatingParameterTypeItemProvider = new FloatingParameterTypeItemProvider(this);
		}

		return floatingParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.GammaDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GammaDistributionTypeItemProvider gammaDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.GammaDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGammaDistributionTypeAdapter() {
		if (gammaDistributionTypeItemProvider == null) {
			gammaDistributionTypeItemProvider = new GammaDistributionTypeItemProvider(this);
		}

		return gammaDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.LogNormalDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogNormalDistributionTypeItemProvider logNormalDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.LogNormalDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogNormalDistributionTypeAdapter() {
		if (logNormalDistributionTypeItemProvider == null) {
			logNormalDistributionTypeItemProvider = new LogNormalDistributionTypeItemProvider(this);
		}

		return logNormalDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.NegativeExponentialDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegativeExponentialDistributionTypeItemProvider negativeExponentialDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.NegativeExponentialDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegativeExponentialDistributionTypeAdapter() {
		if (negativeExponentialDistributionTypeItemProvider == null) {
			negativeExponentialDistributionTypeItemProvider = new NegativeExponentialDistributionTypeItemProvider(this);
		}

		return negativeExponentialDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.NormalDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalDistributionTypeItemProvider normalDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.NormalDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalDistributionTypeAdapter() {
		if (normalDistributionTypeItemProvider == null) {
			normalDistributionTypeItemProvider = new NormalDistributionTypeItemProvider(this);
		}

		return normalDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.NumericParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericParameterTypeItemProvider numericParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.NumericParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericParameterTypeAdapter() {
		if (numericParameterTypeItemProvider == null) {
			numericParameterTypeItemProvider = new NumericParameterTypeItemProvider(this);
		}

		return numericParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterValueItemProvider parameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterValueAdapter() {
		if (parameterValueItemProvider == null) {
			parameterValueItemProvider = new ParameterValueItemProvider(this);
		}

		return parameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.PoissonDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PoissonDistributionTypeItemProvider poissonDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.PoissonDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPoissonDistributionTypeAdapter() {
		if (poissonDistributionTypeItemProvider == null) {
			poissonDistributionTypeItemProvider = new PoissonDistributionTypeItemProvider(this);
		}

		return poissonDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.PriorityParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PriorityParametersItemProvider priorityParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.PriorityParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPriorityParametersAdapter() {
		if (priorityParametersItemProvider == null) {
			priorityParametersItemProvider = new PriorityParametersItemProvider(this);
		}

		return priorityParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.PropertyParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyParametersItemProvider propertyParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.PropertyParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyParametersAdapter() {
		if (propertyParametersItemProvider == null) {
			propertyParametersItemProvider = new PropertyParametersItemProvider(this);
		}

		return propertyParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.PropertyType1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyType1ItemProvider propertyType1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.PropertyType1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyType1Adapter() {
		if (propertyType1ItemProvider == null) {
			propertyType1ItemProvider = new PropertyType1ItemProvider(this);
		}

		return propertyType1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ResourceParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceParametersItemProvider resourceParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ResourceParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceParametersAdapter() {
		if (resourceParametersItemProvider == null) {
			resourceParametersItemProvider = new ResourceParametersItemProvider(this);
		}

		return resourceParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ScenarioParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioParametersItemProvider scenarioParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ScenarioParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioParametersAdapter() {
		if (scenarioParametersItemProvider == null) {
			scenarioParametersItemProvider = new ScenarioParametersItemProvider(this);
		}

		return scenarioParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.ScenarioParametersType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioParametersTypeItemProvider scenarioParametersTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.ScenarioParametersType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioParametersTypeAdapter() {
		if (scenarioParametersTypeItemProvider == null) {
			scenarioParametersTypeItemProvider = new ScenarioParametersTypeItemProvider(this);
		}

		return scenarioParametersTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.StringParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringParameterTypeItemProvider stringParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.StringParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringParameterTypeAdapter() {
		if (stringParameterTypeItemProvider == null) {
			stringParameterTypeItemProvider = new StringParameterTypeItemProvider(this);
		}

		return stringParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.TimeParameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeParametersItemProvider timeParametersItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.TimeParameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeParametersAdapter() {
		if (timeParametersItemProvider == null) {
			timeParametersItemProvider = new TimeParametersItemProvider(this);
		}

		return timeParametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.TriangularDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriangularDistributionTypeItemProvider triangularDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.TriangularDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriangularDistributionTypeAdapter() {
		if (triangularDistributionTypeItemProvider == null) {
			triangularDistributionTypeItemProvider = new TriangularDistributionTypeItemProvider(this);
		}

		return triangularDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.TruncatedNormalDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TruncatedNormalDistributionTypeItemProvider truncatedNormalDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.TruncatedNormalDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTruncatedNormalDistributionTypeAdapter() {
		if (truncatedNormalDistributionTypeItemProvider == null) {
			truncatedNormalDistributionTypeItemProvider = new TruncatedNormalDistributionTypeItemProvider(this);
		}

		return truncatedNormalDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.UniformDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniformDistributionTypeItemProvider uniformDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.UniformDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniformDistributionTypeAdapter() {
		if (uniformDistributionTypeItemProvider == null) {
			uniformDistributionTypeItemProvider = new UniformDistributionTypeItemProvider(this);
		}

		return uniformDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.UserDistributionDataPointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDistributionDataPointTypeItemProvider userDistributionDataPointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.UserDistributionDataPointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDistributionDataPointTypeAdapter() {
		if (userDistributionDataPointTypeItemProvider == null) {
			userDistributionDataPointTypeItemProvider = new UserDistributionDataPointTypeItemProvider(this);
		}

		return userDistributionDataPointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.UserDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDistributionTypeItemProvider userDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.UserDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDistributionTypeAdapter() {
		if (userDistributionTypeItemProvider == null) {
			userDistributionTypeItemProvider = new UserDistributionTypeItemProvider(this);
		}

		return userDistributionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.VendorExtension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VendorExtensionItemProvider vendorExtensionItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.VendorExtension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVendorExtensionAdapter() {
		if (vendorExtensionItemProvider == null) {
			vendorExtensionItemProvider = new VendorExtensionItemProvider(this);
		}

		return vendorExtensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.bpsim2.WeibullDistributionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeibullDistributionTypeItemProvider weibullDistributionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.bpsim2.WeibullDistributionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeibullDistributionTypeAdapter() {
		if (weibullDistributionTypeItemProvider == null) {
			weibullDistributionTypeItemProvider = new WeibullDistributionTypeItemProvider(this);
		}

		return weibullDistributionTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (betaDistributionTypeItemProvider != null) betaDistributionTypeItemProvider.dispose();
		if (binomialDistributionTypeItemProvider != null) binomialDistributionTypeItemProvider.dispose();
		if (booleanParameterTypeItemProvider != null) booleanParameterTypeItemProvider.dispose();
		if (bpSimDataTypeItemProvider != null) bpSimDataTypeItemProvider.dispose();
		if (calendarItemProvider != null) calendarItemProvider.dispose();
		if (constantParameterItemProvider != null) constantParameterItemProvider.dispose();
		if (controlParametersItemProvider != null) controlParametersItemProvider.dispose();
		if (costParametersItemProvider != null) costParametersItemProvider.dispose();
		if (dateTimeParameterTypeItemProvider != null) dateTimeParameterTypeItemProvider.dispose();
		if (distributionParameterItemProvider != null) distributionParameterItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (durationParameterTypeItemProvider != null) durationParameterTypeItemProvider.dispose();
		if (elementParametersItemProvider != null) elementParametersItemProvider.dispose();
		if (elementParametersTypeItemProvider != null) elementParametersTypeItemProvider.dispose();
		if (enumParameterTypeItemProvider != null) enumParameterTypeItemProvider.dispose();
		if (erlangDistributionTypeItemProvider != null) erlangDistributionTypeItemProvider.dispose();
		if (expressionParameterTypeItemProvider != null) expressionParameterTypeItemProvider.dispose();
		if (floatingParameterTypeItemProvider != null) floatingParameterTypeItemProvider.dispose();
		if (gammaDistributionTypeItemProvider != null) gammaDistributionTypeItemProvider.dispose();
		if (logNormalDistributionTypeItemProvider != null) logNormalDistributionTypeItemProvider.dispose();
		if (negativeExponentialDistributionTypeItemProvider != null) negativeExponentialDistributionTypeItemProvider.dispose();
		if (normalDistributionTypeItemProvider != null) normalDistributionTypeItemProvider.dispose();
		if (numericParameterTypeItemProvider != null) numericParameterTypeItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (parameterValueItemProvider != null) parameterValueItemProvider.dispose();
		if (poissonDistributionTypeItemProvider != null) poissonDistributionTypeItemProvider.dispose();
		if (priorityParametersItemProvider != null) priorityParametersItemProvider.dispose();
		if (propertyParametersItemProvider != null) propertyParametersItemProvider.dispose();
		if (propertyType1ItemProvider != null) propertyType1ItemProvider.dispose();
		if (resourceParametersItemProvider != null) resourceParametersItemProvider.dispose();
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (scenarioParametersItemProvider != null) scenarioParametersItemProvider.dispose();
		if (scenarioParametersTypeItemProvider != null) scenarioParametersTypeItemProvider.dispose();
		if (stringParameterTypeItemProvider != null) stringParameterTypeItemProvider.dispose();
		if (timeParametersItemProvider != null) timeParametersItemProvider.dispose();
		if (triangularDistributionTypeItemProvider != null) triangularDistributionTypeItemProvider.dispose();
		if (truncatedNormalDistributionTypeItemProvider != null) truncatedNormalDistributionTypeItemProvider.dispose();
		if (uniformDistributionTypeItemProvider != null) uniformDistributionTypeItemProvider.dispose();
		if (userDistributionDataPointTypeItemProvider != null) userDistributionDataPointTypeItemProvider.dispose();
		if (userDistributionTypeItemProvider != null) userDistributionTypeItemProvider.dispose();
		if (vendorExtensionItemProvider != null) vendorExtensionItemProvider.dispose();
		if (weibullDistributionTypeItemProvider != null) weibullDistributionTypeItemProvider.dispose();
	}

}
